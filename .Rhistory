est1 <- vector(mode = "list", length = numsim)
est2 <- vector(mode = "list", length = numsim)
est3 <- vector(mode = "list", length = numsim)
## Start for() loop
for(i in 1:numsim){
## Simulation of 25 samples from normal population
simdat[[i]] <- rnorm(n = n, mean = pop.mean, sd = pop.sd)
## Estimate the population sd by the sample sd, MAD and Qn
est1[[i]] <- sd(simdat[[i]])
est2[[i]] <- mad(simdat[[i]])
est3[[i]] <- Qn(simdat[[i]])
## End for() loop
}
## Save parameter specifications
pars.spec <- data.frame(numsim, n, pop.mean, pop.sd)
## Return the lists
list(pars.spec = pars.spec, simdat = simdat, est1 = est1, est2 = est2, est3 = est3)
## End function
}
rnorm(n, mean = 50, sd = 15)
set.seed(123)
## Start function
simfun <- function(
## Function parameters
numsim,
n = 25,  #the default of the n will be 25, so if we don't specify, n is 25
pop.mean = 50, #default of pop.mean
pop.sd = 15
){
## Create empty lists of size numsim
simdat <- vector(mode = "list", length = numsim)
est1 <- vector(mode = "list", length = numsim)
est2 <- vector(mode = "list", length = numsim)
est3 <- vector(mode = "list", length = numsim)
## Start for() loop
for(i in 1:numsim){
## Simulation of 25 samples from normal population
simdat[[i]] <- rnorm(n = n, mean = pop.mean, sd = pop.sd)
## Estimate the population sd by the sample sd, MAD and Qn
est1[[i]] <- sd(simdat[[i]])
est2[[i]] <- mad(simdat[[i]])
est3[[i]] <- Qn(simdat[[i]])
## End for() loop
}
## Save parameter specifications
pars.spec <- data.frame(numsim, n, pop.mean, pop.sd)
## Return the lists
list(pars.spec = pars.spec, simdat = simdat, est1 = est1, est2 = est2, est3 = est3)
## End function
}
res1 <- simfun(100)
res1 <- simfun(numsim = 100)
knitr::opts_chunk$set(echo = TRUE)
library('robustbase')
library('robustbase')
## Start function
simfun <- function(
## Function parameters
numsim,
n = 25,  #the default of the n will be 25, so if we don't specify, n is 25
pop.mean = 50, #default of pop.mean
pop.sd = 15
){
## Create empty lists of size numsim
simdat <- vector(mode = "list", length = numsim)
est1 <- vector(mode = "list", length = numsim)
est2 <- vector(mode = "list", length = numsim)
est3 <- vector(mode = "list", length = numsim)
## Start for() loop
for(i in 1:numsim){
## Simulation of 25 samples from normal population
simdat[[i]] <- rnorm(n = n, mean = pop.mean, sd = pop.sd)
## Estimate the population sd by the sample sd, MAD and Qn
est1[[i]] <- sd(simdat[[i]])
est2[[i]] <- mad(simdat[[i]])
est3[[i]] <- Qn(simdat[[i]])
## End for() loop
}
## Save parameter specifications
pars.spec <- data.frame(numsim, n, pop.mean, pop.sd)
## Return the lists
list(pars.spec = pars.spec, simdat = simdat, est1 = est1, est2 = est2, est3 = est3)
## End function
}
res1 <- simfun(numsim = 100)
simfun <- function(
numsim,
n.s1,
n.s2,
mean.s1 = 50,
mean.s2,
sd.s1 = 15,
sd.s2
){
s1 <- vector(mode = "list", length = numsim)
s2 <- vector(mode = "list", length = numsim)
ttest <- vector(mode = "list", length = numsim)
for(i in 1:numsim){
s1[[i]] <- rnorm(n = n.s1, mean = 50, sd = 15)
s2[[i]] <- rnorm(n = n.s2, mean = mean.s2, sd = sd.s2)
ttest[[i]] <- t.test(x=s1[[i]], y=s2[[i]], var.equal = TRUE)
}
pars.spec <- data.frame(numsim, n.s1, n.s2, mean.s1, mean.s2, sd.s1, sd.s2)
list(pars.spec = pars.spec, s1 = s1, s2 = s2, ttest = ttest)
}
set.seed(123)
res <- simfun(numsim = 10000,
n.s1 = 10,
n.s2 = 10,
mean.s1 = 50,
mean.s2 = 50,
sd.s1 = 15,
sd.s2 = 7.5)
plot(J3)
## install.packages('HSAUR')
library(HSAUR)
data(agefat)
?agefat
d <- agefat
d$sex <- ifelse(d$sex == "male", 1, 0)
L1 <- lm(formula = fat ~ age, data = d)
L2 <- lm(formula = fat ~ age + sex, data = d)
L3 <- lm(formula = fat ~ age * sex, data = d)
summary(L1)
summary(L2)
summary(L3)
attach(d)
n <- length(fat)
e1 <- e2 <- e3 <- numeric(n)
set.seed(123)
for (k in 1:n) {
y <- fat[-k]
x <- age[-k]
z <- sex[-k]
J1 <- lm(y ~ x)
yfat1 <- J1$coef[1] + J1$coef[2] * age[k]
e1[k] <- fat[k] - yfat1
J2 <- lm(y ~ x + z)
yfat2 <- J2$coef[1] + J2$coef[2] * age[k] + J2$coef[3] * sex[k]
e2[k] <- fat[k] - yfat2
J3 <- lm(y ~ x*z)
yfat3 <- J3$coef[1] + J3$coef[2] * age[k] + J3$coef[3] * sex[k] + J3$coef[4] * age[k] * sex[k]
e3[k] <- fat[k] - yfat3
}
c(mean(e1^2), mean(e2^2), mean(e3^2))
plot(J3)
plot(J2)
summary(L2)
d <- agefat
d$sex <- ifelse(d$sex == "male", 1, 0)
L1 <- lm(formula = fat ~ age, data = d)
L2 <- lm(formula = fat ~ age + sex, data = d)
L3 <- lm(formula = fat ~ age * sex, data = d)
summary(L1)
summary(L2)
summary(L3)
CI_width <- function(samplesize, numsim = 1000) {
sim_data <- vector(mode = "list", length = numsim)
sim_CI_low <- vector(mode = "list", length = numsim)
sim_CI_high <- vector(mode = "list", length = numsim)
sim_CI_width <- numeric(numsim)
for (i in 1:numsim) {
set.seed(123)
# Generate random sample from normal distribution with mean = 50
sim_CI_low[[i]] <- as.numeric(t.test(sim_data[[i]]$conf.int[1]))
sim_CI_high[[i]] <- as.numeric(t.test(sim_data[[i]]$conf.int[2]))
sim_CI_width[[i]] <- sim_CI_high[[i]] - sim_CI_low[[i]]
}
exp_CIwidth <- mean(sim_CI_width)
return(exp_CIwidth)
}
CI_width <- function(samplesize, numsim = 10000) {
sim_data <- vector(mode = "list", length = numsim)
sim_CI_low <- vector(mode = "list", length = numsim)
sim_CI_high <- vector(mode = "list", length = numsim)
sim_CI_width <- numeric(numsim)
for (i in 1:numsim) {
set.seed(123)
# Generate random sample from normal distribution with mean = 50
sim_CI_low[[i]] <- as.numeric(t.test(sim_data[[i]]$conf.int[1]))
sim_CI_high[[i]] <- as.numeric(t.test(sim_data[[i]]$conf.int[2]))
sim_CI_width[[i]] <- sim_CI_high[[i]] - sim_CI_low[[i]]
}
exp_CIwidth <- mean(sim_CI_width)
return(exp_CIwidth)
}
CI_width(sample = 10)
CI_width(samplesize = 10)
CI_width <- function(samplesize, numsim = 10000) {
sim_data <- vector(mode = "list", length = numsim)
sim_CI_low <- vector(mode = "list", length = numsim)
sim_CI_high <- vector(mode = "list", length = numsim)
sim_CI_width <- numeric(numsim)
for (i in 1:numsim) {
set.seed(123)
# Generate random sample from normal distribution with mean = 50
sim_CI_low[[i]] <- as.numeric(t.test(sim_data[[i]]$conf.int[1]))
sim_CI_high[[i]] <- as.numeric(t.test(sim_data[[i]]$conf.int[2]))
sim_CI_width[[i]] <- sim_CI_high[[i]] - sim_CI_low[[i]]
}
exp_CIwidth <- mean(sim_CI_width)
return(exp_CIwidth)
}
CI_width(samplesize = 10)
data <- rnorm(n = 50, mean = 50, sd = 15)
CI_low <- t.test(data)
View(CI_low)
t.test(data)
CI_low <- t.test(data)$conf.int[1]
CI_low
t.test(data)
CI_low
CI_high <- t.test(data)$conf.int[2]
CI_high
CI_width <- CI_high - CI_low
CI_width
CI_width <- function(samplesize, numsim = 10000) {
sim_data <- vector(mode = "list", length = numsim)
sim_CI_low <- vector(mode = "list", length = numsim)
sim_CI_high <- vector(mode = "list", length = numsim)
sim_CI_width <- numeric(numsim)
for (i in 1:numsim) {
set.seed(123)
# Generate random sample from normal distribution with mean = 50
sim_CI_low[[i]] <- as.numeric(t.test(sim_data[[i]]$conf.int[1][[i]]))
sim_CI_high[[i]] <- as.numeric(t.test(sim_data[[i]]$conf.int[2][[i]]))
sim_CI_width[[i]] <- sim_CI_high[[i]] - sim_CI_low[[i]]
}
exp_CIwidth <- mean(sim_CI_width)
return(exp_CIwidth)
}
CI_width(samplesize = 10)
for (i in 1:numsim) {
set.seed(123)
# Generate random sample from normal distribution with mean = 50
sim_CI_low[[i]] <- as.numeric(t.test(sim_data[[i]])$conf.int[1][[i]])
sim_CI_high[[i]] <- as.numeric(t.test(sim_data[[i]])$conf.int[2][[i]])
sim_CI_width[[i]] <- sim_CI_high[[i]] - sim_CI_low[[i]]
}
CI_width <- function(samplesize, numsim = 10000) {
sim_data <- vector(mode = "list", length = numsim)
sim_CI_low <- vector(mode = "list", length = numsim)
sim_CI_high <- vector(mode = "list", length = numsim)
sim_CI_width <- numeric(numsim)
for (i in 1:numsim) {
set.seed(123)
# Generate random sample from normal distribution with mean = 50
sim_CI_low[[i]] <- as.numeric(t.test(sim_data[[i]])$conf.int[1][[i]])
sim_CI_high[[i]] <- as.numeric(t.test(sim_data[[i]])$conf.int[2][[i]])
sim_CI_width[[i]] <- sim_CI_high[[i]] - sim_CI_low[[i]]
}
exp_CIwidth <- mean(sim_CI_width)
return(exp_CIwidth)
}
CI_width(samplesize = 10)
data <- rnorm(n = 50, mean = 50, sd = 15)
t.test(data)
CI_low <- t.test(data)$conf.int[1]
CI_high <- t.test(data)$conf.int[2]
CI_width <- CI_high - CI_low
CI_width <- function(samplesize, numsim = 10000) {
sim_data <- vector(mode = "list", length = numsim)
sim_CI_low <- vector(mode = "list", length = numsim)
sim_CI_high <- vector(mode = "list", length = numsim)
sim_CI_width <- numeric(numsim)
for (i in 1:numsim) {
set.seed(123)
# Generate random sample from normal distribution with mean = 50
sim_CI_low[[i]] <- as.numeric(t.test(sim_data[[i]])$conf.int[1][[i]])
sim_CI_high[[i]] <- as.numeric(t.test(sim_data[[i]])$conf.int[2][[i]])
sim_CI_width[[i]] <- sim_CI_high[[i]] - sim_CI_low[[i]]
}
exp_CIwidth <- mean(sim_CI_width)
return(exp_CIwidth)
}
CI.width <- function(samplesize, numsim = 10000) {
sim_data <- vector(mode = "list", length = numsim)
sim_CI_low <- vector(mode = "list", length = numsim)
sim_CI_high <- vector(mode = "list", length = numsim)
sim_CI_width <- numeric(numsim)
for (i in 1:numsim) {
set.seed(123)
# Generate random sample from normal distribution with mean = 50
sim_CI_low[[i]] <- as.numeric(t.test(sim_data[[i]])$conf.int[1][[i]])
sim_CI_high[[i]] <- as.numeric(t.test(sim_data[[i]])$conf.int[2][[i]])
sim_CI_width[[i]] <- sim_CI_high[[i]] - sim_CI_low[[i]]
}
exp_CIwidth <- mean(sim_CI_width)
return(exp_CIwidth)
}
CI.width(samplesize = 10)
CI.width <- function(samplesize, numsim = 10000) {
sim_data <- vector(mode = "list", length = numsim)
sim_CI_low <- vector(mode = "list", length = numsim)
sim_CI_high <- vector(mode = "list", length = numsim)
sim_CI_width <- numeric(numsim)
for (i in 1:numsim) {
set.seed(123)
# Generate random sample from normal distribution with mean = 50
sim_CI_low[[i]] <- as.numeric(t.test(sim_data[[i]])$conf.int[1])
sim_CI_high[[i]] <- as.numeric(t.test(sim_data[[i]])$conf.int[2])
sim_CI_width[[i]] <- sim_CI_high[[i]] - sim_CI_low[[i]]
}
exp_CIwidth <- mean(sim_CI_width)
return(exp_CIwidth)
}
CI.width(samplesize = 10)
CI.width <- function(samplesize, numsim = 10000) {
sim_data <- vector(mode = "list", length = numsim)
sim_CI_low <- vector(mode = "list", length = numsim)
sim_CI_high <- vector(mode = "list", length = numsim)
sim_CI_width <- numeric(numsim)
for (i in 1:numsim) {
set.seed(123)
# Generate random sample from normal distribution with mean = 50
sim_CI_low[[i]] <- as.numeric(t.test(sim_data[[i]])[["conf.int"]][1])
sim_CI_high[[i]] <- as.numeric(t.test(sim_data[[i]])[["conf.int"]][2])
sim_CI_width[[i]] <- sim_CI_high[[i]] - sim_CI_low[[i]]
}
exp_CIwidth <- mean(sim_CI_width)
return(exp_CIwidth)
}
CI.width(samplesize = 10)
CI.width(samplesize = 10)
sim_data <- vector(mode = "list", length = numsim)
sim_CI_low <- vector(mode = "list", length = numsim)
CI.width <- function (samplesize, numsim = 10000) {
sim_data <- vector(mode = "list", length = numsim)
sim_CI_low <- vector(mode = "list", length = numsim)
sim_CI_high <- vector(mode = "list", length = numsim)
sim_CI_width <- numeric(numsim)
for (i in 1:numsim) {
set.seed(123)
# Generate random sample from normal distribution with mean = 50
sim_CI_low[[i]] <- as.numeric(t.test(sim_data[[i]])$conf.int[1])
sim_CI_high[[i]] <- as.numeric(t.test(sim_data[[i]])$conf.int[2])
sim_CI_width[[i]] <- sim_CI_high[[i]] - sim_CI_low[[i]]
}
exp_CIwidth <- mean(sim_CI_width)
return(exp_CIwidth)
}
CI.width(samplesize = 10)
data <- rnorm(n = 50, mean = 50, sd = 15)
t.test(data)
CI_low <- t.test(data)$conf.int[1]
CI_high <- t.test(data)$conf.int[2]
CI_width <- CI_high - CI_low
CI.width <- function (samplesize, numsim = 10000) {
sim_data <- vector(mode = "list", length = numsim)
sim_CI_low <- vector(mode = "list", length = numsim)
sim_CI_high <- vector(mode = "list", length = numsim)
sim_CI_width <- numeric(numsim)
for (i in 1:numsim) {
set.seed(123)
# Generate random sample from normal distribution with mean = 50
sim_CI_low[[i]] <- as.numeric(t.test(sim_data[[i]])$conf.int[1])
sim_CI_high[[i]] <- as.numeric(t.test(sim_data[[i]])$conf.int[2])
sim_CI_width[[i]] <- sim_CI_high[[i]] - sim_CI_low[[i]]
}
exp_CIwidth <- mean(sim_CI_width)
return(exp_CIwidth)
}
CI.width(samplesize = 10)
data <- rnorm(n = 50, mean = 50, sd = 15)
t.test(data)
CI_low <- t.test(data)$conf.int[1]
CI_high <- t.test(data)$conf.int[2]
CI_width <- CI_high - CI_low
CI.width <- function (samplesize, numsim = 10000) {
sim_data <- vector(mode = "list", length = numsim)
sim_CI_low <- vector(mode = "list", length = numsim)
sim_CI_high <- vector(mode = "list", length = numsim)
sim_CI_width <- numeric(numsim)
for (i in 1:numsim) {
set.seed(123)
# Generate random sample from normal distribution with mean = 50
sim_CI_low[[i]] <- as.numeric(t.test(sim_data[[i]])$conf.int[1])
sim_CI_high[[i]] <- as.numeric(t.test(sim_data[[i]])$conf.int[2])
sim_CI_width[[i]] <- sim_CI_high[[i]] - sim_CI_low[[i]]
}
exp_CIwidth <- mean(sim_CI_width)
return(exp_CIwidth)
}
CI_width <- function(samplesize,
numsim = 1000){
## Objects to store for loop results
sim_data <- vector(mode = "list", length = numsim)
sim_CI_low <- vector(mode = "list", length = numsim)
sim_CI_up <- vector(mode = "list", length = numsim)
sim_CI_width <- numeric(numsim)
## For loop to generate results
for (i in 1:numsim){
set.seed(123)
### Generate random sample from normal distribution with mean 50 and standard deviation 15
sim_data[[i]] <- rnorm(n= samplesize, mean = 50, sd =15)
### Calculate the probability CI for this simulated draw
sim_CI_low[[i]] <- as.numeric(t.test(sim_data[[i]])[["conf.int"]][1])
sim_CI_up[[i]] <- as.numeric(t.test(sim_data[[i]])[["conf.int"]][2])
sim_CI_width[[i]] <-  sim_CI_up[[i]] - sim_CI_low[[i]]
}
exp_CIwidth <- mean(sim_CI_width)
return(exp_CIwidth)
}
CI_width(samplesize = 10)
data <- rnorm(n = 50, mean = 50, sd = 15)
t.test(data)
CI_low <- t.test(data)$conf.int[1]
CI_high <- t.test(data)$conf.int[2]
CI_width <- CI_high - CI_low
CI.width <- function (samplesize, numsim = 10000) {
sim_data <- vector(mode = "list", length = numsim)
sim_CI_low <- vector(mode = "list", length = numsim)
sim_CI_high <- vector(mode = "list", length = numsim)
sim_CI_width <- numeric(numsim)
for (i in 1:numsim) {
set.seed(123)
# Generate random sample from normal distribution with mean = 50
sim_CI_low[[i]] <- as.numeric(t.test(sim_data[[i]])[["conf.int"]][1])
sim_CI_high[[i]] <- as.numeric(t.test(sim_data[[i]])[["conf.int"]][2])
sim_CI_width[[i]] <- sim_CI_high[[i]] - sim_CI_low[[i]]
}
exp_CIwidth <- mean(sim_CI_width)
return(exp_CIwidth)
}
CI.width(samplesize = 10)
CI_width <- function (samplesize, numsim = 10000) {
sim_data <- vector(mode = "list", length = numsim)
sim_CI_low <- vector(mode = "list", length = numsim)
sim_CI_high <- vector(mode = "list", length = numsim)
sim_CI_width <- numeric(numsim)
for (i in 1:numsim) {
set.seed(123)
# Generate random sample from normal distribution with mean = 50
sim_CI_low[[i]] <- as.numeric(t.test(sim_data[[i]])[["conf.int"]][1])
sim_CI_high[[i]] <- as.numeric(t.test(sim_data[[i]])[["conf.int"]][2])
sim_CI_width[[i]] <- sim_CI_high[[i]] - sim_CI_low[[i]]
}
exp_CIwidth <- mean(sim_CI_width)
return(exp_CIwidth)
}
CI_width(samplesize = 10)
data <- rnorm(n = 50, mean = 50, sd = 15)
t.test(data)
CI_low <- t.test(data)$conf.int[1]
CI_high <- t.test(data)$conf.int[2]
CI_width <- CI_high - CI_low
CI_width <- function (samplesize, numsim = 10000) {
sim_data <- vector(mode = "list", length = numsim)
sim_CI_low <- vector(mode = "list", length = numsim)
sim_CI_high <- vector(mode = "list", length = numsim)
sim_CI_width <- numeric(numsim)
for (i in 1:numsim) {
set.seed(123)
# Generate random sample from normal distribution with mean = 50
sim_CI_low[[i]] <- as.numeric(t.test(sim_data[[i]])[["conf.int"]][1])
sim_CI_high[[i]] <- as.numeric(t.test(sim_data[[i]])[["conf.int"]][2])
sim_CI_width[[i]] <- sim_CI_high[[i]] - sim_CI_low[[i]]
}
exp_CIwidth <- mean(sim_CI_width)
return(exp_CIwidth)
}
CI_width(samplesize = 10)
library(boot)
set.seed(123)
e <- d[d$trt=="E",]$posResp
## Store RCT data in R
### experimental treatment (E) against the standard of care (C)
d <- data.frame(
id = 1:200,
trt = rep(c('C', 'E'), each = 100),
posResp = NA
)
d$posResp[d$trt == 'C'] <- rep(c(0, 1), times = c(90, 10))
d$posResp[d$trt == 'E'] <- rep(c(0, 1), times = c(85, 15))
library(boot)
set.seed(123)
e <- d[d$trt=="E",]$posResp
c <- d[d$trt=="C",]$posResp
risk.diff <- function(x, i, j){
e <- x[x$trt=="E",]$posResp
c <- x[x$trt=="C",]$posResp
n1 <- length(e)
n2 <- length(c)
i <- sample(1:n1, size=n1, replace=TRUE)  # sampling from group E
btotal.risk.e <- e[i]
j <- sample(1:n2, size=n2, replace=TRUE)  # sampling from group C
btotal.risk.c <- c[j]
sum(btotal.risk.e)/n1 - sum(btotal.risk.c)/n2
}
obj.risk.diff <- boot(data = d, statistic = risk.diff, R=1000)
obj.risk.diff
hist(obj.risk.diff$t)
boot.ci(obj.risk.diff, type= "all")
library(boot)
set.seed(123)
e <- d[d$trt=="E",]$posResp
c <- d[d$trt=="C",]$posResp
risk.diff <- function(x, i, j){
e <- x[x$trt=="E",]$posResp
c <- x[x$trt=="C",]$posResp
n1 <- length(e)
n2 <- length(c)
i <- sample(1:n1, size=n1, replace=TRUE)  # sampling from group E
btotal.risk.e <- e[i]
j <- sample(1:n2, size=n2, replace=TRUE)  # sampling from group C
btotal.risk.c <- c[j]
sum(btotal.risk.e)/n1 - sum(btotal.risk.c)/n2
}
obj.risk.diff <- boot(data = d, statistic = risk.diff, R=10000)
obj.risk.diff
hist(obj.risk.diff$t)
boot.ci(obj.risk.diff, type= "all")
